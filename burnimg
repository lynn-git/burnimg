#!/bin/bash

#Author: Lynn
#Email: shuai.zhong@sim.com
#Version 3.0

config_file="/etc/burnimg/burnimg.conf"
help="/usr/share/burnimg/help"
declare -A image

usage()
{
        dialog --title "Help" --textbox $help 12 50
}

version()
{
        dialog --title "Version" --infobox "burnimg tools 3.0" 3 25
}

while getopts hvdp:P: opt
do
        case "$opt" in
                h)
                        usage
                        exit 0;;
                v)
                        version
                        exit 0;;
                p)
                        img_path=$OPTARG
                        flag=1;;
                d)
                        debug=1;;
                *)
                        usage
                        exit 0;;
        esac
done

if [ -r $config_file ]
then
        echo
else
        dialog --title "Error" --infobox "I Need $config_file" 4 50

        exit 1
fi

if [ -z $img_path]
then
        img_path=`gawk 'BEGIN{FS=":"} /image_dir/{print $2}' $config_file`
fi

tempfile=`mktemp /tmp/burnimg.XXX`
logfile=`mktemp /tmp/burnimg_log.XXX`

if dialog --title "Select project" \
        --checklist "Platform:" 20 60 24 \
        MSM8625q "General" off \
        MSM8928 "General" off \
        MSM8960 "General" off \
        2>$tempfile
then
        tmp=`cat $tempfile`
        length=${#tmp}
        project=${tmp:1:$[$length - 2]}

        cat $config_file | sed -n "/$project/,/#/p" > $tempfile

        sed -i "/#/d" $tempfile
        sed -i "/^$/d" $tempfile

        partions=`gawk 'BEGIN{FS=":"} {print $1}' $tempfile`

        images=`gawk 'BEGIN{FS=":"} {print $2}' $tempfile`

        i=0
        for var in $partions
        do
                partion[$i]=$var
                (( i++ ))
        done

        i=0
        for var in $images
        do
                image[${partion[$i]}]=$var
                (( i++ ))
        done
fi

if dialog --title "Burning Image" \
        --checklist "Image:" 25 60 24 \
        boot "${image[boot]}" on \
        system "${image[system]}" off \
        modem "${image[modem]}" off \
        aboot "${image[aboot]}" off \
        recovery "${image[recovery]}" off \
        userdata "${image[userdata]}" off \
        cache "${image[cache]}" off \
        persist "${image[persist]}" off \
        oemsbl "${image[oemsbl]}" off \
        qcsbl "${image[qcsbl]}" off \
        cfgdata "${image[cfgdata]}" off \
        tz "${image[tz]}" off \
        rpm "${image[rpm]}" off \
        sbl1 "${image[sbl1]}" off \
        sbl2 "${image[sbl2]}" off \
        sbl3 "${image[sbl3]}" off \
        tombstones "${image[tombstones]}" off \
        2>$tempfile
then
        selections=`cat $tempfile`

        if (( flag !=1 ))
        then
                if [ -z $img_path ]
                then
                        dialog --title "Path" --inputbox "Enter the path to the image: " 10 50 2>$tempfile
                        if (( $? == 1 ))
                        then
                                dialog --title "Error" --infobox "Input Error" 4 50
                                rm -f $tempfile 2> /dev/null

                                exit 1
                        fi

                        img_path=`cat $tempfile`
                fi
        fi

        rm -f $tempfile 2> /dev/null
        char=${img_path:0:1}
        if [[ $char == .* ]]
        then
                cur_path=`pwd`
                length=${#img_path}
                img_path=${img_path:1:$length}
                img_path="$cur_path$img_path"
                length=${#img_path}
                char=${img_path:$[$length - 1]:$length}
                if [[ $char != / ]]
                then
                        img_path=$img_path/
                fi

        elif [[ $char == ~* ]]
        then
                length=${#img_path}
                img_path=${img_path:1:$length}
                img_path=$HOME$img_path
                length=${#img_path}
                char=${img_path:$[$length - 1]:$length}
                if [[ $char != / ]]
                then
                        img_path=$img_path/
                fi
        fi

        flag=0
        for file in $img_path*
        do
                if [[ $file == *img ]]
                then
                        flag=1
                        break
                elif [[ $file == *mbn ]]
                then
                        flag=1
                        break
                elif [[ $file == *bin ]]
                then
                        flag=1
                        break
                elif [[ $file == *ext4 ]]
                then
                        flag=1
                        break
                fi
        done

        if (( $flag == 0 ))
        then
                dialog --title "Error" --infobox "Can not find any image files" 4 50

                exit 1
        fi

        exec 3>$logfile
        exec 6>&1
        exec 7>&2
        exec 1>&3
        exec 2>&3

        i=0
        for var in $selections
        do
                case "$var" in
                        modem)
                                echo "burning ${image[modem]} ......."
                                partition[$i]="modem"
                                (( i++ ));;
                        oemsbl)
                                echo "burning ${image[oemsbl]} ......."
                                partition[$i]="oemsbl"
                                (( i++ ));;
                        qcsbl)
                                echo "burning ${image[qcsbl]} ......."
                                partition[$i]="qcsbl"
                                (( i++ ));;
                        cfgdata)
                                echo "burning ${image[cfgdata]} ......."
                                partition[$i]="cfgdata"
                                (( i++ ));;
                        aboot)
                                echo "burning ${image[aboot]} ......."
                                partition[$i]="aboot"
                                (( i++ ));;
                        boot)
                                echo "burning ${image[boot]} ......."
                                partition[$i]="boot"
                                (( i++ ));;
                        system)
                                echo "burning ${image[system]} ......."
                                partition[$i]="system"
                                (( i++ ));;
                        recovery)
                                echo "burning ${image[recovery]} ......."
                                partition[$i]="recovery"
                                (( i++ ));;
                        userdata)
                                echo "burning ${image[userdata]} ......."
                                partition[$i]="userdata"
                                (( i++ ));;
                        cache)
                                echo "burning ${image[cache]} ......."
                                partition[$i]="cache"
                                (( i++ ));;
                        persist)
                                echo "burning ${image[persist]} ......."
                                partition[$i]="persist"
                                (( i++ ));;
                        tz)
                                echo "burning ${image[tz]} ......."
                                partition[$i]="tz"
                                (( i++ ));;
                        rpm)
                                echo "burning ${image[rpm]} ......."
                                partition[$i]="rpm"
                                (( i++ ));;
                        sbl1)
                                echo "burning ${image[sbl1]} ......."
                                partition[$i]="sbl1"
                                (( i++ ));;
                        sbl2)
                                echo "burning ${image[sbl2]} ......."
                                partition[$i]="sbl2"
                                (( i++ ));;
                        sbl3)
                                echo "burning ${image[sbl3]} ......."
                                partition[$i]="sbl3"
                                (( i++ ));;
                        tombstones)
                                echo "burning ${image[tombstones]} ......."
                                partition[$i]="tombstones"
                                (( i++ ));;
                        esac
                done

else
        echo "Take it easy"

        exit 1
fi

exec 1>&6
exec 2>&7
text=`cat $logfile`
dialog --title "Burning List" --infobox "$text" 15 50

exec 1>&3
exec 2>&3

adb devices

adb reboot-bootloader
if (( $? != 0 ))
then
        exec 1>&6
        exec 2>&7
        dialog --title "Error" --infobox "can not reboot to fastboot mode" 4 50

        exit 1
fi

i=0
while [ -n "${partition[$i]}" ]
do
        exec 1>&6
        exec 2>&7

        dialog --title "Burning" --infobox "burning ${image[${partition[$i]}]} ........." 4 50

        exec 1>&3
        exec 2>&3

        sudo fastboot flash ${partition[$i]} $img_path${image[${partition[$i]}]}

        (( i++ ))
done

sudo fastboot reboot
exec 1>&6
exec 2>&7

dialog --title "Burning Success" --infobox "rebooting ......." 4 50

if (( debug != 1 ))
then
        rm -f $logfile 2> /dev/null
fi

exit 0
